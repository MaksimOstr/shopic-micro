spring:
  cloud:
    config:
      label: services
      discovery:
        enabled: true
        service-id: config-server
      fail-fast: true
  config:
    import: "optional:configserver:"
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: "{baseUrl}/auth/login/oauth2/code/{registrationId}"
            scope:
              - profile
              - email
              - openid

  mail:
    from: noreply@gmail.com
    host: smtp.gmail.com
    port: 587
    username: ${EMAIL_SENDER_USERNAME}
    password: ${EMAIL_SENDER_PASSWORD}

  kafka:
    bootstrap-servers: localhost:9094
    consumer:
      auto-offset-reset: latest
      enable-auto-commit: false
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    listener:
      ack-mode: manual_immediate
  pulsar:
    consumer:
      retry-enable: true

logging:
  level:
    org:
      springframework:
        security:
          authentication: debug
          oauth2: debug

management:
  endpoint:
    health:
      show-details: always
  endpoints:
    web:
      exposure:
        include: health
  health:
    circuitbreakers:
      enabled: true

resilience4j:
  retry:
    instances:
          codeGenerationRetry:
            max-attempts: 3
            wait-duration: 100ms
            retry-exceptions:
              - org.springframework.dao.DataIntegrityViolationException


